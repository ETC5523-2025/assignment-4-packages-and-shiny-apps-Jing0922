library(usethis)
usethis::use_data_raw('Nitrate-surface')
install.packages("neonUtilities")
install.packages("neonOS")
stackByTable("data-raw/NEON_nitrate-surfacewater.zip")
library(neonUtilities)
library(neonOS)
stackByTable("data-raw/NEON_nitrate-surfacewater.zip")
?stackByTable
library(neonUtilities)
library(neonOS)
neonUtilities::stackByTable("data-raw/NEON_nitrate-surfacewater.zip")
library(neonUtilities)
library(neonOS)
neonUtilities::stackByTable("data-raw/NEON_nitrate-surfacewater.zip")
nitrate <- loadByProduct(dpID="DP1.20063.001",
site=c("PRLA","SUGG","TOOK"),
package="expanded",
release="RELEASE-2024",
check.size=F)
?loadByProduct
sites <- c("ARIK","COMO","KING","LEWI","MAYF","PRIN","SUGG","WALK","WLOU")
# 拉取数据（package="expanded" 给更多字段；release="RELEASE-2025"）
nitrate_list <- neonUtilities::loadByProduct(
dpID = "DP1.20033.001",
site = sites,
startdate="2018-01",
enddate="2023-12",
package = "expanded",
release = "RELEASE-2025",
check.size = FALSE
)
sites <- c("ARIK","COMO","KING","LEWI","MAYF")
# 拉取数据（package="expanded" 给更多字段；release="RELEASE-2025"）
nitrate_list <- neonUtilities::loadByProduct(
dpID = "DP1.20033.001",
site = sites,
startdate="2018-01",
enddate="2023-12",
package = "expanded",
release = "RELEASE-2025",
check.size = FALSE
)
sites <- c("ARIK","COMO","KING","LEWI","MAYF")
# 拉取数据（package="expanded" 给更多字段；release="RELEASE-2025"）
nitrate_list <- neonUtilities::loadByProduct(
dpID = "DP1.20033.001",
site = sites,
startdate="2018-01",
enddate="2023-12",
package = "expanded",
release = "RELEASE-2025",
check.size = FALSE
)
sites <- c("ARIK","COMO","KING","LEWI","MAYF")
# 拉取数据（package="expanded" 给更多字段；release="RELEASE-2025"）
nitrate_list <- neonUtilities::loadByProduct(
dpID = "DP1.20033.001",
site = sites,
startdate="2018-01",
enddate="2023-12",
release = "RELEASE-2025",
check.size = FALSE
)
# raw_list 是一个 named list，里面包含不同 tables（根据数据产品结构）
# 找出主要含测量数据的表（名字可能像 "nitrate" 或 "SUNA" 等，实际看 raw_list 的 names）
names(nitrate_list)
View(nitrate_list)
list2env(nitrate_list, .GlobalEnv)
View(NSW_15_minute)
View(issueLog_20033)
saveRDS(NSW_15_minute,
"/data-raw/nitrate.rds")
saveRDS(nitrate_list,
"/data-raw/nitrate.rds")
?saveRDS
saveRDS(nitrate_list,
"/data-raw/nitrate.rds")
saveRDS(nitrate_list,
"/data-raw/nitrate.rds")
View(NSW_15_minute)
nitrate_raw <- nitrate_list$NSW_15_minute
nitrate_raw
head(nitrate_raw)
unique(nitrate_raw$finalQF)
unique(nitrate_raw$horizontalPosition)
nitrate_clean <- nitrate_raw %>%
select(
siteID,
horizontalPosition,
verticalPosition,
startDateTime,
endDateTime,
surfWaterNitrateMean,
surfWaterNitrateMinimum,
surfWaterNitrateMaximum,
surfWaterNitrateStdErMean,
finalQF
) %>%
# Filter valid data
filter(
!is.na(surfWaterNitrateMean),
finalQF == 0      # Quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)
) %>%
# Convert time column format
mutate(
startDateTime = as.POSIXct(startDateTime, format = "%Y-%m-%d %H:%M:%S"),
endDateTime = as.POSIXct(endDateTime, format = "%Y-%m-%d %H:%M:%S")
) %>%
arrange(startDateTime)
nitrate_clean <- nitrate_raw |>
select(
siteID,
horizontalPosition,
verticalPosition,
startDateTime,
endDateTime,
surfWaterNitrateMean,
surfWaterNitrateMinimum,
surfWaterNitrateMaximum,
surfWaterNitrateStdErMean,
finalQF
) |>
# Filter valid data
filter(
!is.na(surfWaterNitrateMean),
finalQF == 0      # Quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)
) |>
# Convert time column format
mutate(
startDateTime = as.POSIXct(startDateTime, format = "%Y-%m-%d %H:%M:%S"),
endDateTime = as.POSIXct(endDateTime, format = "%Y-%m-%d %H:%M:%S")
) |>
arrange(startDateTime)
nitrate_clean <- nitrate_raw |>
select(
siteID,
horizontalPosition,
verticalPosition,
startDateTime,
endDateTime,
surfWaterNitrateMean,
surfWaterNitrateMinimum,
surfWaterNitrateMaximum,
surfWaterNitrateStdErMean,
finalQF
) |>
# Filter valid data
filter(
!is.na(surfWaterNitrateMean),
finalQF == 0      # Quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)
) |>
# Convert time column format
mutate(
startDateTime = as.POSIXct(startDateTime, format = "%Y-%m-%d %H:%M:%S"),
endDateTime = as.POSIXct(endDateTime, format = "%Y-%m-%d %H:%M:%S")
)
library(tidyverse)
nitrate_clean <- nitrate_raw |>
select(
siteID,
horizontalPosition,
verticalPosition,
startDateTime,
endDateTime,
surfWaterNitrateMean,
surfWaterNitrateMinimum,
surfWaterNitrateMaximum,
surfWaterNitrateStdErMean,
finalQF
) |>
# Filter valid data
filter(
!is.na(surfWaterNitrateMean),
finalQF == 0      # Quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)
) |>
# Convert time column format
mutate(
startDateTime = as.POSIXct(startDateTime, format = "%Y-%m-%d %H:%M:%S"),
endDateTime = as.POSIXct(endDateTime, format = "%Y-%m-%d %H:%M:%S")
)
View(nitrate_clean)
View(nitrate_raw)
glimpse(nitrate_clean)
nitrate_clean <- nitrate_raw |>
select(
siteID,
horizontalPosition,
verticalPosition,
startDateTime,
endDateTime,
surfWaterNitrateMean,
surfWaterNitrateMinimum,
surfWaterNitrateMaximum,
surfWaterNitrateStdErMean,
finalQF
) |>
# Filter valid data
filter(
!is.na(surfWaterNitrateMean),
finalQF == 0      # Quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)
) |>
# Convert time column format
mutate(
startDateTime = as.POSIXct(startDateTime, format = "%Y-%m-%d %H:%M:%S"),
endDateTime = as.POSIXct(endDateTime, format = "%Y-%m-%d %H:%M:%S"),
startDate = as.Date(startDateTime),
startTime = format(startDateTime, "%H:%M:%S"),
endDate = as.Date(endDateTime),
endTime = format(endDateTime, "%H:%M:%S")
)
View(nitrate_clean)
usethis::use_data(nitrate_clean, overwrite = TRUE)
library(neonUtilities)
library(neonOS)
library(tidyverse)
library(usethis)
devtools::load_all()
nitrate_clean
usethis::use_readme_rmd()
head(nitrate_clean)
usethis::use_mit_license()
?list2env
?names
calculate_daily_stats <- function(){
daily_summary <- nitrate_data %>%
dplyr::group_by(siteID, startDate) %>%
dplyr::summarise(
daily_mean = mean(surfWaterNitrateMean, na.rm = TRUE),
daily_sd = sd(surfWaterNitrateMean, na.rm = TRUE),
daily_max = max(surfWaterNitrateMean, na.rm = TRUE),
daily_min = min(surfWaterNitrateMean, na.rm = TRUE),
n_observations = dplyr::n(),
.groups = "drop"
) %>%
dplyr::rename(date = startDate)
return(daily_summary)
}
devtools::load_all()
calculate_daily_stats
calculate_daily_stats(NitrateExplorer)
calculate_daily_stats(nitrate_clean)
devtools::document()
calculate_daily_stats()
calculate_daily_stats()
devtools::load_all()
calculate_daily_stats()
daily_summary <- nitrate_clean %>%
dplyr::group_by(siteID, startDate) %>%
dplyr::summarise(
daily_mean = mean(surfWaterNitrateMean, na.rm = TRUE),
daily_sd = sd(surfWaterNitrateMean, na.rm = TRUE),
daily_max = max(surfWaterNitrateMean, na.rm = TRUE),
daily_min = min(surfWaterNitrateMean, na.rm = TRUE),
n_observations = dplyr::n(),
.groups = "drop"
) %>%
dplyr::rename(date = startDate)
View(daily_summary)
devtools::document()
nitrate_clean %>%
dplyr::group_by(siteID, startDate) %>%
dplyr::summarise(
daily_mean = mean(surfWaterNitrateMean, na.rm = TRUE),
daily_sd = sd(surfWaterNitrateMean, na.rm = TRUE),
daily_max = max(surfWaterNitrateMean, na.rm = TRUE),
daily_min = min(surfWaterNitrateMean, na.rm = TRUE),
n_observations = dplyr::n(),
.groups = "drop"
) %>%
dplyr::rename(date = startDate)
devtools::load_all()
usethis::use_package("dplyr")
source("C:/Users/10354/monash_git/5523/NitrateExplorer/R/daily_summary.R")
devtools::load_all()
calculate_daily_stats()
nitrate_clean
head(nitrate_clean)
glimpse(nitrate_clean)
source("C:/Users/10354/monash_git/5523/NitrateExplorer/R/monthly_summary.R")
devtools::load_all()
calculate_monthly_stats()
calculate_monthly_stats <- function(){
monthly_summary <- nitrate_data %>%
dplyr::mutate(
year_month = format(startDate, "%Y-%m")
) %>%
dplyr::group_by(siteID, year_month) %>%
dplyr::summarise(
monthly_mean = mean(surfWaterNitrateMean, na.rm = TRUE),
monthly_sd = sd(surfWaterNitrateMean, na.rm = TRUE),
monthly_max = max(surfWaterNitrateMean, na.rm = TRUE),
monthly_min = min(surfWaterNitrateMean, na.rm = TRUE),
n_days = dplyr::n_distinct(startDate),
.groups = "drop"
)
return(monthly_summary)
}
calculate_monthly_stats()
source("C:/Users/10354/monash_git/5523/NitrateExplorer/R/monthly_summary.R")
source("C:/Users/10354/monash_git/5523/NitrateExplorer/R/monthly_summary.R")
calculate_monthly_stats()
devtools::load_all()
source("C:/Users/10354/monash_git/5523/NitrateExplorer/R/daily_summary.R")
devtools::load_all()
calculate_daily_stats()
devtools::load_all()
calculate_daily_stats()
source("C:/Users/10354/monash_git/5523/NitrateExplorer/R/daily_summary.R")
devtools::load_all()
calculate_daily_stats(nitrate_clean)
source("C:/Users/10354/monash_git/5523/NitrateExplorer/R/boxplot_comparison.R")
plot_site_comparison()
devtools::load_all()
plot_site_comparison()
nitrate_clean
head(nitrate_clean)
devtools::load_all()
plot_site_comparison()
usethis::use_package("ggplot2")
plot_site_comparison()  # 使用默认数据集
devtools::load_all()
plot_site_comparison()
source("C:/Users/10354/monash_git/5523/NitrateExplorer/R/boxplot_comparison.R")
devtools::load_all()
plot_site_comparison()
source("C:/Users/10354/monash_git/5523/NitrateExplorer/R/boxplot_comparison.R")
devtools::load_all()
plot_site_comparison(nitrate_clean)
source("C:/Users/10354/monash_git/5523/NitrateExplorer/R/boxplot_comparison.R")
plot_site_comparison(nitrate_clean)
View(daily_summary)
View(daily_summary)
source("C:/Users/10354/monash_git/5523/NitrateExplorer/R/calculate_yearly_stats.R")
devtools::load_all()
calculate_yearly_stats(nitrate_clean)
?floor_date
calculate_yearly_stats(nitrate_clean)
source("C:/Users/10354/monash_git/5523/NitrateExplorer/R/calculate_yearly_stats.R")
devtools::load_all()
calculate_yearly_stats(nitrate_clean)
source("C:/Users/10354/monash_git/5523/NitrateExplorer/R/calculate_yearly_stats.R")
devtools::load_all()
calculate_yearly_stats(nitrate_clean)
calculate_monthly_stats(nitrate_clean)
devtools::load_all()
calculate_monthly_stats(nitrate_clean)
source("C:/Users/10354/monash_git/5523/NitrateExplorer/R/calculate_monthly_stats.R")
calculate_monthly_stats(nitrate_clean)
source("C:/Users/10354/monash_git/5523/NitrateExplorer/R/calculate_yearly_stats.R")
calculate_yearly_stats(nitrate_clean)
source("C:/Users/10354/monash_git/5523/NitrateExplorer/R/plot_time_series.R")
plot_time_series(nitrate_clean,aggregation = 'monthly')
shiny::runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
devtools::load_all()
run_my_app()
run_my_app()
run_my_app()
source("C:/Users/10354/monash_git/5523/NitrateExplorer/R/run_app.R")
devtools::load_all()
run_my_app()
runApp('inst/NitrateExplorer')
devtools::load_all()
run_app()
devtools::load_all()
run_app()
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
nitrate_clean
head(nitrate_clean)
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
runApp('inst/NitrateExplorer')
devtools::load_all()
run_app()
devtools::load_all()
calculate_daily_stats()
calculate_daily_stats(nitrate_clean)
# 检查包是否正确加载
library(NitrateExplorer)
# 检查函数是否可用
ls("package:NitrateExplorer")
# 检查数据是否可用
exists("nitrate_clean", where = asNamespace("NitrateExplorer"))
# 尝试直接调用函数（应该会显示同样的错误）
NitrateExplorer::calculate_daily_stats
# 检查包是否正确加载
library(NitrateExplorer)
# 检查函数是否可用
ls("package:NitrateExplorer")
# 检查数据是否可用
exists("nitrate_clean", where = asNamespace("NitrateExplorer"))
# 尝试直接调用函数（应该会显示同样的错误）
NitrateExplorer::calculate_daily_stats
devtools::document()
runApp('inst/NitrateExplorer')
devtools::install()
Calculate daily statistics for specific sites:
source("C:/Users/10354/monash_git/5523/NitrateExplorer/R/calculate_daily_stats.R")
# 检查包是否正确加载
library(NitrateExplorer)
# 检查函数是否可用
ls("package:NitrateExplorer")
# 检查数据是否可用
exists("nitrate_clean", where = asNamespace("NitrateExplorer"))
# 尝试直接调用函数（应该会显示同样的错误）
NitrateExplorer::calculate_daily_stats
runApp('inst/NitrateExplorer')
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
rm(list = c("calculate_daily_stats", "calculate_monthly_stats",
"calculate_yearly_stats", "plot_time_series", "boxplot_comparison"))
# 重新生成文档和安装
devtools::document()
devtools::install()
# 重新启动R会话（重要！）
# 或者使用：
.rs.restartR()
library(NitrateExplorer)
# 检查函数是否在正确的命名空间中
ls("package:NitrateExplorer")
# 测试函数调用
data <- NitrateExplorer::nitrate_clean
NitrateExplorer::calculate_daily_stats(data)
runApp('inst/NitrateExplorer')
rm(list = c("calculate_daily_stats", "calculate_monthly_stats",
"calculate_yearly_stats", "plot_time_series"))
devtools::load_all()
rm(list = c("calculate_daily_stats", "calculate_monthly_stats",
"calculate_yearly_stats", "plot_time_series"))
devtools::document()
runApp('inst/NitrateExplorer')
glimpse(nitrate_clean)
glimpse(NitrateExplorer::calculate_daily_stats(nitrate_clean))
runApp('inst/NitrateExplorer')
devtools::document()
devtools::install()
devtools::load_all()
devtools::install()
